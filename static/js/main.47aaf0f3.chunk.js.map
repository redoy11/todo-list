{"version":3,"sources":["components/AddProject/AddProject.tsx","store/ducks/tdItems.ts","components/Todo/Todo.tsx","App.tsx","serviceWorker.ts","store/index.tsx","index.tsx"],"names":["rand","Math","round","random","getModalStyle","top","left","transform","border","useStyles","makeStyles","theme","createStyles","paper","outline","position","width","height","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","display","justifyContent","flexDirection","color","AddProject","props","classes","React","modalStyle","open","closeHandler","saveHandler","value","setValue","Modal","onClose","style","className","Typography","variant","TextField","label","onChange","event","target","Button","disabled","onClick","SET_ITEMS","initialState","SeamlessImmutable","items","getTdItems","state","mapDispatchToProps","setItemsActionCreator","type","ConnectedTodo","connect","todoList","setOpen","name","title","children","Container","maxWidth","component","Paper","IconButton","Icon","length","treeData","generateNodeProps","node","verticalAlign","margin","fontSize","isVirtualized","App","Boolean","window","location","hostname","match","defaultReducers","action","reducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47aaf0f3.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Modal, TextField, Typography, Button, makeStyles, Theme, createStyles } from '@material-ui/core';\nimport './AddProject.css';\n\ninterface AddProjectProps {\n  closeHandler: () => void;\n  saveHandler: (name: string) => void;\n  open: boolean;\n}\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n    border: 'none',\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      outline: 0,\n      position: 'absolute',\n      width: 400,\n      height: 200,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      flexDirection: 'column',\n      color: 'rebeccapurple',\n    },\n  }),\n);\n\nconst AddProject: React.FC<AddProjectProps> = (props: AddProjectProps) => {\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const { open, closeHandler, saveHandler } = props;\n  const [value, setValue] = React.useState<string>('');\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n  React.useEffect(() => {\n    setValue('');\n  }, [open]);\n  return (\n    <Modal open={open} onClose={closeHandler}>\n      <div style={modalStyle} className={classes.paper}>\n        <Typography variant=\"h6\"> Add new Project </Typography>\n        <TextField label=\"Name\" value={value} onChange={handleChange} variant=\"outlined\" /> <br />\n        <Button\n          className={'AddProject-save-btn'}\n          variant=\"contained\"\n          disabled={value === ''}\n          onClick={() => {\n            saveHandler(value);\n          }}\n        >\n          Save\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default AddProject;\n","import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\n\n/** interface for flexible object */\ninterface FlexObj {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\n/** The reducer name */\nexport const reducerName = 'tdItems';\n\n// actions\n/** action types */\nexport const SET_ITEMS = 'todo/reducer/tdItems/SET_ITEMS';\n\n/** interface for SET_ITEMS action */\nexport interface SetItemsAction extends AnyAction {\n  items: FlexObj[];\n  type: typeof SET_ITEMS;\n}\n\n/** Create type for reducer actions */\nexport type ListTableActionTypes = SetItemsAction | AnyAction;\n\n// action creators\n\n/** set items action creator\n * @param {string} FlexObj[] - items to be set\n * @returns {SetItemsAction} - an action to set items in store\n */\nexport const setItems = (items: FlexObj[]): SetItemsAction => ({\n  items,\n  type: SET_ITEMS,\n});\n\n// the reducer\n\n/** interface for tdItems state in redux store */\ninterface tdItemsState {\n  items: FlexObj[];\n}\n\n/** Create an immutable tdItems state */\nexport type ImmutableListTableState = SeamlessImmutable.ImmutableObject<tdItemsState>;\n\n/** initial tdItems state */\nconst initialState: ImmutableListTableState = SeamlessImmutable({\n  items: [],\n});\n\n/** the tdItems reducer function */\nexport default function reducer(\n  state: ImmutableListTableState = initialState,\n  action: ListTableActionTypes,\n): ImmutableListTableState {\n  switch (action.type) {\n    case SET_ITEMS:\n      return SeamlessImmutable({\n        items: action.items,\n      });\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** returns the items\n * @param {Partial<Store>} state - the redux store\n * @return { FlexObj[] } - the existing items\n */\nexport function getTdItems(state: Partial<Store>): FlexObj[] {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (state as any)[reducerName].items;\n}\n","import * as React from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport './Todo.css';\nimport { Paper, Container, Typography, IconButton, Icon } from '@material-ui/core';\nimport AddProject from '../AddProject/AddProject';\nimport { Store } from 'redux';\nimport { getTdItems, setItems } from '../../store/ducks/tdItems';\nimport { connect } from 'react-redux';\n\nexport interface FlexObj {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\nexport interface TodoPros {\n  todoList: FlexObj[];\n  setItemsActionCreator: typeof setItems;\n}\n\nconst Todo: React.FC<TodoPros> = (props: TodoPros) => {\n  const { todoList, setItemsActionCreator } = props;\n  const [open, setOpen] = React.useState(false);\n  const treeOnChangeHandler = (treeData: FlexObj[]) => setItemsActionCreator(treeData);\n  const saveHandler = (name: string) => {\n    setItemsActionCreator([...todoList, { title: name, children: [] }]);\n    setOpen(false);\n  };\n  const openHandler = () => {\n    setOpen(true);\n  };\n  const closeHandler = () => {\n    setOpen(false);\n  };\n  return (\n    <React.Fragment>\n      <AddProject open={open} closeHandler={closeHandler} saveHandler={saveHandler} />\n      <Container className=\"Todo-container\" maxWidth=\"sm\" component={Paper}>\n        <div className=\"Todo-header-container\">\n          <div className=\"Todo-subtitle\">\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              Current List\n            </Typography>\n          </div>\n          <div className=\"Todo-header\">\n            <Typography variant=\"h6\"> Your Projects </Typography>\n          </div>\n          <IconButton className=\"Todo-add\" onClick={openHandler}>\n            <Icon>add</Icon>\n          </IconButton>\n          {todoList.length === 0 && (\n            <div className=\"Todo-empty-list\">\n              <Typography variant=\"subtitle1\" color=\"secondary\">\n                List is empty. Please add to see items on list.\n              </Typography>\n            </div>\n          )}\n        </div>\n        <div className=\"Todo-body\">\n          <SortableTree\n            treeData={todoList}\n            onChange={treeOnChangeHandler}\n            generateNodeProps={({ node }) => ({\n              title: (\n                <div>\n                  <span style={{ verticalAlign: 'sub', margin: '0px 10px' }}>\n                    <Icon fontSize=\"small\" className=\"item-dot\">\n                      fiber_manual_record\n                    </Icon>\n                  </span>\n                  {node.title}\n                </div>\n              ),\n            })}\n            isVirtualized={false}\n          />\n        </div>\n      </Container>\n    </React.Fragment>\n  );\n};\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  todoList: FlexObj[];\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    todoList: getTdItems(state),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  setItemsActionCreator: setItems,\n};\n\n/** connect App to the redux store */\nconst ConnectedTodo = connect(mapStateToProps, mapDispatchToProps)(Todo);\n\nexport default ConnectedTodo;\n","import React from 'react';\nimport './App.css';\nimport Todo from './components/Todo/Todo';\nimport 'react-sortable-tree/style.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport tdItems, { reducerName as tdItemsReducer } from './ducks/tdItems';\n\n// reducers\n/** Initial reducers in the reducer registry */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultReducers: any = {};\n\n/** Add session reducer to registry */\ndefaultReducers[tdItemsReducer] = tdItems;\n\n/** Create reducers from default reducers obj */\nconst reducers = combineReducers(defaultReducers);\n\n// store\n/** The initial store */\nconst store = createStore(\n  reducers,\n  SeamlessImmutable({}),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}